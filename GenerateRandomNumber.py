from math import log, ceil
from random import randint
def generateRandom(a, b):
	"""
	generate integers between [a, b] uniformly by using 
	a random generator Random(0,1)
	"""
	newEnd = b - a + 1
	if newEnd == 0:
		return a

	digits = int(ceil(log(newEnd, 2)))
	while True:
		randomNumber = []
		result = 0
		exp = 1
		for digit in range(digits):
			randomNumber.append(randint(0, 1))	
		for digit in range(digits - 1, -1, -1):
			result += exp * randomNumber[digit]
			exp *= 2	
		result += a
		if result <= b:
			break

	return result
	
#print generateRandom(1, 7)

def generateFromGenerator(n, m):
	"""
	Given a random generator random(m), write a random generator random(n)
	random(m) can generator numbers uniformly from 0, 1, ..., m
	if n < m, we can just discard any number generated by random(m) which 
	exceeds n
	here we only implement a generator for which n > m
	Use m as the base to represent m + 1, m + 2, ... n
	"""
	digits = int(ceil(log(n + 1, m + 1)))
	while True:
		randomNumber = []
		result = 0
		exp = 1
		for digit in range(digits):
			randomNumber.append(randint(0, m))
		for digit in range(digits - 1, -1, -1):
			result += exp * randomNumber[digit]
			exp *= (m + 1)
		if result <= n:
			break

	return result

print generateFromGenerator(7, 5)